/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AxelarExecutable,
  AxelarExecutableInterface,
} from "../../../../../@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotApprovedByGateway",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commandId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "sourceChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "sourceAddress",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "contract IAxelarGateway",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516106a33803806106a383398101604081905261002f91610067565b6001600160a01b0381166100565760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0316608052610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b6080516105e46100bf60003960008181604b01528181610115015261022d01526105e46000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063116191b6146100465780631a98b2e01461009657806349160658146100ab575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100a96100a436600461032e565b6100be565b005b6100a96100b9366004610408565b6101d6565b600085856040516100d09291906104ac565b6040519081900381207f1876eed9000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631876eed99061015a908e908e908e908e908e9089908d908d908d906004016104e5565b602060405180830381600087803b15801561017457600080fd5b505af1158015610188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ac9190610544565b6101c957604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b600082826040516101e89291906104ac565b6040519081900381207f5f6970c3000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635f6970c39061026c908b908b908b908b908b90899060040161056d565b602060405180830381600087803b15801561028657600080fd5b505af115801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be9190610544565b6102db57604051631403112d60e21b815260040160405180910390fd5b5050505050505050565b60008083601f8401126102f757600080fd5b50813567ffffffffffffffff81111561030f57600080fd5b60208301915083602082850101111561032757600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561034d57600080fd5b8a35995060208b013567ffffffffffffffff8082111561036c57600080fd5b6103788e838f016102e5565b909b50995060408d013591508082111561039157600080fd5b61039d8e838f016102e5565b909950975060608d01359150808211156103b657600080fd5b6103c28e838f016102e5565b909750955060808d01359150808211156103db57600080fd5b506103e88d828e016102e5565b9150809450508092505060a08b013590509295989b9194979a5092959850565b60008060008060008060006080888a03121561042357600080fd5b87359650602088013567ffffffffffffffff8082111561044257600080fd5b61044e8b838c016102e5565b909850965060408a013591508082111561046757600080fd5b6104738b838c016102e5565b909650945060608a013591508082111561048c57600080fd5b506104998a828b016102e5565b989b979a50959850939692959293505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c0602082015260006104ff60c083018a8c6104bc565b828103604084015261051281898b6104bc565b9050866060840152828103608084015261052d8186886104bc565b9150508260a08301529a9950505050505050505050565b60006020828403121561055657600080fd5b8151801515811461056657600080fd5b9392505050565b8681526080602082015260006105876080830187896104bc565b828103604084015261059a8186886104bc565b91505082606083015297965050505050505056fea26469706673582212206610255c8bed625550198090e1ece93175d3320ebc3afd81f6e8de17e290e81864736f6c63430008090033";

type AxelarExecutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarExecutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarExecutable__factory extends ContractFactory {
  constructor(...args: AxelarExecutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    gateway_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AxelarExecutable> {
    return super.deploy(gateway_, overrides || {}) as Promise<AxelarExecutable>;
  }
  override getDeployTransaction(
    gateway_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, overrides || {});
  }
  override attach(address: string): AxelarExecutable {
    return super.attach(address) as AxelarExecutable;
  }
  override connect(signer: Signer): AxelarExecutable__factory {
    return super.connect(signer) as AxelarExecutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarExecutableInterface {
    return new utils.Interface(_abi) as AxelarExecutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarExecutable {
    return new Contract(address, _abi, signerOrProvider) as AxelarExecutable;
  }
}
