/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IAxelarGasServiceInterface extends utils.Interface {
  functions: {
    "addExpressGas(bytes32,uint256,address,uint256,address)": FunctionFragment;
    "addGas(bytes32,uint256,address,uint256,address)": FunctionFragment;
    "addNativeExpressGas(bytes32,uint256,address)": FunctionFragment;
    "addNativeGas(bytes32,uint256,address)": FunctionFragment;
    "collectFees(address,address[],uint256[])": FunctionFragment;
    "gasCollector()": FunctionFragment;
    "payGasForContractCall(address,string,string,bytes,address,uint256,address)": FunctionFragment;
    "payGasForContractCallWithToken(address,string,string,bytes,string,uint256,address,uint256,address)": FunctionFragment;
    "payGasForExpressCallWithToken(address,string,string,bytes,string,uint256,address,uint256,address)": FunctionFragment;
    "payNativeGasForContractCall(address,string,string,bytes,address)": FunctionFragment;
    "payNativeGasForContractCallWithToken(address,string,string,bytes,string,uint256,address)": FunctionFragment;
    "payNativeGasForExpressCallWithToken(address,string,string,bytes,string,uint256,address)": FunctionFragment;
    "refund(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addExpressGas"
      | "addGas"
      | "addNativeExpressGas"
      | "addNativeGas"
      | "collectFees"
      | "gasCollector"
      | "payGasForContractCall"
      | "payGasForContractCallWithToken"
      | "payGasForExpressCallWithToken"
      | "payNativeGasForContractCall"
      | "payNativeGasForContractCallWithToken"
      | "payNativeGasForExpressCallWithToken"
      | "refund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addExpressGas",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addGas",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeExpressGas",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeGas",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gasCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForContractCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForContractCallWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForExpressCallWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForContractCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForContractCallWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForExpressCallWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addExpressGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNativeExpressGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNativeGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForContractCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForContractCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForExpressCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForContractCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForContractCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForExpressCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;

  events: {
    "ExpressGasAdded(bytes32,uint256,address,uint256,address)": EventFragment;
    "GasAdded(bytes32,uint256,address,uint256,address)": EventFragment;
    "GasPaidForContractCall(address,string,string,bytes32,address,uint256,address)": EventFragment;
    "GasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)": EventFragment;
    "GasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)": EventFragment;
    "NativeExpressGasAdded(bytes32,uint256,uint256,address)": EventFragment;
    "NativeGasAdded(bytes32,uint256,uint256,address)": EventFragment;
    "NativeGasPaidForContractCall(address,string,string,bytes32,uint256,address)": EventFragment;
    "NativeGasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)": EventFragment;
    "NativeGasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExpressGasAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPaidForContractCall"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GasPaidForContractCallWithToken"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GasPaidForExpressCallWithToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeExpressGasAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeGasAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NativeGasPaidForContractCall"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NativeGasPaidForContractCallWithToken"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NativeGasPaidForExpressCallWithToken"
  ): EventFragment;
}

export interface ExpressGasAddedEventObject {
  txHash: string;
  logIndex: BigNumber;
  gasToken: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type ExpressGasAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  ExpressGasAddedEventObject
>;

export type ExpressGasAddedEventFilter = TypedEventFilter<ExpressGasAddedEvent>;

export interface GasAddedEventObject {
  txHash: string;
  logIndex: BigNumber;
  gasToken: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type GasAddedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  GasAddedEventObject
>;

export type GasAddedEventFilter = TypedEventFilter<GasAddedEvent>;

export interface GasPaidForContractCallEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  gasToken: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type GasPaidForContractCallEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, string],
  GasPaidForContractCallEventObject
>;

export type GasPaidForContractCallEventFilter =
  TypedEventFilter<GasPaidForContractCallEvent>;

export interface GasPaidForContractCallWithTokenEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  symbol: string;
  amount: BigNumber;
  gasToken: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type GasPaidForContractCallWithTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ],
  GasPaidForContractCallWithTokenEventObject
>;

export type GasPaidForContractCallWithTokenEventFilter =
  TypedEventFilter<GasPaidForContractCallWithTokenEvent>;

export interface GasPaidForExpressCallWithTokenEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  symbol: string;
  amount: BigNumber;
  gasToken: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type GasPaidForExpressCallWithTokenEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ],
  GasPaidForExpressCallWithTokenEventObject
>;

export type GasPaidForExpressCallWithTokenEventFilter =
  TypedEventFilter<GasPaidForExpressCallWithTokenEvent>;

export interface NativeExpressGasAddedEventObject {
  txHash: string;
  logIndex: BigNumber;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type NativeExpressGasAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  NativeExpressGasAddedEventObject
>;

export type NativeExpressGasAddedEventFilter =
  TypedEventFilter<NativeExpressGasAddedEvent>;

export interface NativeGasAddedEventObject {
  txHash: string;
  logIndex: BigNumber;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type NativeGasAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  NativeGasAddedEventObject
>;

export type NativeGasAddedEventFilter = TypedEventFilter<NativeGasAddedEvent>;

export interface NativeGasPaidForContractCallEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type NativeGasPaidForContractCallEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  NativeGasPaidForContractCallEventObject
>;

export type NativeGasPaidForContractCallEventFilter =
  TypedEventFilter<NativeGasPaidForContractCallEvent>;

export interface NativeGasPaidForContractCallWithTokenEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  symbol: string;
  amount: BigNumber;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type NativeGasPaidForContractCallWithTokenEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  NativeGasPaidForContractCallWithTokenEventObject
>;

export type NativeGasPaidForContractCallWithTokenEventFilter =
  TypedEventFilter<NativeGasPaidForContractCallWithTokenEvent>;

export interface NativeGasPaidForExpressCallWithTokenEventObject {
  sourceAddress: string;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: string;
  symbol: string;
  amount: BigNumber;
  gasFeeAmount: BigNumber;
  refundAddress: string;
}
export type NativeGasPaidForExpressCallWithTokenEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  NativeGasPaidForExpressCallWithTokenEventObject
>;

export type NativeGasPaidForExpressCallWithTokenEventFilter =
  TypedEventFilter<NativeGasPaidForExpressCallWithTokenEvent>;

export interface IAxelarGasService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAxelarGasServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNativeExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNativeGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFees(
      receiver: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasCollector(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payNativeGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payNativeGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payNativeGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addExpressGas(
    txHash: PromiseOrValue<BytesLike>,
    txIndex: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    gasFeeAmount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addGas(
    txHash: PromiseOrValue<BytesLike>,
    txIndex: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    gasFeeAmount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNativeExpressGas(
    txHash: PromiseOrValue<BytesLike>,
    logIndex: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNativeGas(
    txHash: PromiseOrValue<BytesLike>,
    logIndex: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFees(
    receiver: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasCollector(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payGasForContractCall(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    gasToken: PromiseOrValue<string>,
    gasFeeAmount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payGasForContractCallWithToken(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    symbol: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    gasFeeAmount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payGasForExpressCallWithToken(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    symbol: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    gasFeeAmount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payNativeGasForContractCall(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payNativeGasForContractCallWithToken(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    symbol: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payNativeGasForExpressCallWithToken(
    sender: PromiseOrValue<string>,
    destinationChain: PromiseOrValue<string>,
    destinationAddress: PromiseOrValue<string>,
    payload: PromiseOrValue<BytesLike>,
    symbol: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    receiver: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNativeExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNativeGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFees(
      receiver: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    gasCollector(overrides?: CallOverrides): Promise<string>;

    payGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payNativeGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payNativeGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    payNativeGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExpressGasAdded(bytes32,uint256,address,uint256,address)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): ExpressGasAddedEventFilter;
    ExpressGasAdded(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): ExpressGasAddedEventFilter;

    "GasAdded(bytes32,uint256,address,uint256,address)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasAddedEventFilter;
    GasAdded(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasAddedEventFilter;

    "GasPaidForContractCall(address,string,string,bytes32,address,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForContractCallEventFilter;
    GasPaidForContractCall(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForContractCallEventFilter;

    "GasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForContractCallWithTokenEventFilter;
    GasPaidForContractCallWithToken(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForContractCallWithTokenEventFilter;

    "GasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForExpressCallWithTokenEventFilter;
    GasPaidForExpressCallWithToken(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasToken?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): GasPaidForExpressCallWithTokenEventFilter;

    "NativeExpressGasAdded(bytes32,uint256,uint256,address)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeExpressGasAddedEventFilter;
    NativeExpressGasAdded(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeExpressGasAddedEventFilter;

    "NativeGasAdded(bytes32,uint256,uint256,address)"(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasAddedEventFilter;
    NativeGasAdded(
      txHash?: PromiseOrValue<BytesLike> | null,
      logIndex?: PromiseOrValue<BigNumberish> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasAddedEventFilter;

    "NativeGasPaidForContractCall(address,string,string,bytes32,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForContractCallEventFilter;
    NativeGasPaidForContractCall(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForContractCallEventFilter;

    "NativeGasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForContractCallWithTokenEventFilter;
    NativeGasPaidForContractCallWithToken(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForContractCallWithTokenEventFilter;

    "NativeGasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)"(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForExpressCallWithTokenEventFilter;
    NativeGasPaidForExpressCallWithToken(
      sourceAddress?: PromiseOrValue<string> | null,
      destinationChain?: null,
      destinationAddress?: null,
      payloadHash?: PromiseOrValue<BytesLike> | null,
      symbol?: null,
      amount?: null,
      gasFeeAmount?: null,
      refundAddress?: null
    ): NativeGasPaidForExpressCallWithTokenEventFilter;
  };

  estimateGas: {
    addExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNativeExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNativeGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFees(
      receiver: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasCollector(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payNativeGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payNativeGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payNativeGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addGas(
      txHash: PromiseOrValue<BytesLike>,
      txIndex: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNativeExpressGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNativeGas(
      txHash: PromiseOrValue<BytesLike>,
      logIndex: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFees(
      receiver: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasCollector(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      gasFeeAmount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payNativeGasForContractCall(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payNativeGasForContractCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payNativeGasForExpressCallWithToken(
      sender: PromiseOrValue<string>,
      destinationChain: PromiseOrValue<string>,
      destinationAddress: PromiseOrValue<string>,
      payload: PromiseOrValue<BytesLike>,
      symbol: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
